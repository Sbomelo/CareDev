// <auto-generated />
using System;
using CareDev.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CareDev.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251004191638_SeedBeds")]
    partial class SeedBeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareDev.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BedId")
                        .HasColumnType("int");

                    b.Property<int?>("BedId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeRoomId")
                        .HasColumnType("int");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("AdmissionId");

                    b.HasIndex("BedId")
                        .IsUnique()
                        .HasFilter("[BedId] IS NOT NULL");

                    b.HasIndex("BedId1")
                        .IsUnique()
                        .HasFilter("[BedId1] IS NOT NULL");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomTypeRoomId");

                    b.HasIndex("WardId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("CareDev.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AllergyId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            AllergyId = 1,
                            Name = "None"
                        },
                        new
                        {
                            AllergyId = 2,
                            Name = "Peanuts"
                        },
                        new
                        {
                            AllergyId = 3,
                            Name = "Shellfish"
                        },
                        new
                        {
                            AllergyId = 4,
                            Name = "Penicillin"
                        },
                        new
                        {
                            AllergyId = 5,
                            Name = "Latex"
                        });
                });

            modelBuilder.Entity("CareDev.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicConditionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("ChronicConditionId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CareDev.Models.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("BedId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = 1,
                            BedNumber = "L-101",
                            IsOccupied = false,
                            WardId = 6
                        },
                        new
                        {
                            BedId = 2,
                            BedNumber = "L-102",
                            IsOccupied = false,
                            WardId = 6
                        },
                        new
                        {
                            BedId = 3,
                            BedNumber = "L-103",
                            IsOccupied = false,
                            WardId = 6
                        },
                        new
                        {
                            BedId = 4,
                            BedNumber = "S-201",
                            IsOccupied = false,
                            WardId = 2
                        },
                        new
                        {
                            BedId = 5,
                            BedNumber = "S-202",
                            IsOccupied = false,
                            WardId = 2
                        },
                        new
                        {
                            BedId = 6,
                            BedNumber = "S-203",
                            IsOccupied = false,
                            WardId = 2
                        },
                        new
                        {
                            BedId = 7,
                            BedNumber = "M-301",
                            IsOccupied = false,
                            WardId = 3
                        },
                        new
                        {
                            BedId = 8,
                            BedNumber = "M-302",
                            IsOccupied = false,
                            WardId = 3
                        },
                        new
                        {
                            BedId = 9,
                            BedNumber = "M-303",
                            IsOccupied = false,
                            WardId = 3
                        });
                });

            modelBuilder.Entity("CareDev.Models.ChronicCondition", b =>
                {
                    b.Property<int>("ChronicConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicConditionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChronicConditionId");

                    b.ToTable("ChronicConditions");

                    b.HasData(
                        new
                        {
                            ChronicConditionId = 1,
                            Name = "None"
                        },
                        new
                        {
                            ChronicConditionId = 2,
                            Name = "Diabetes"
                        },
                        new
                        {
                            ChronicConditionId = 3,
                            Name = "Hypertension"
                        },
                        new
                        {
                            ChronicConditionId = 4,
                            Name = "Asthma"
                        },
                        new
                        {
                            ChronicConditionId = 5,
                            Name = "Heart Disease"
                        });
                });

            modelBuilder.Entity("CareDev.Models.Discharge", b =>
                {
                    b.Property<int>("DischargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargeId"));

                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId1")
                        .HasColumnType("int");

                    b.HasKey("DischargeId");

                    b.HasIndex("AdmissionId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientId1");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("CareDev.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("CareDev.Models.DoctorInstruction", b =>
                {
                    b.Property<long>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InstructionId"));

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InstructionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("PatientId1")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructionId");

                    b.HasIndex("PatientId1");

                    b.ToTable("DoctorInstructions");
                });

            modelBuilder.Entity("CareDev.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CareDev.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsageNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MedicationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            MedicationId = 1,
                            Name = "None",
                            Schedule = "N/A"
                        },
                        new
                        {
                            MedicationId = 2,
                            Name = "Paracetamol",
                            Schedule = "PRN"
                        },
                        new
                        {
                            MedicationId = 3,
                            Name = "Ibuprofen",
                            Schedule = "PRN"
                        },
                        new
                        {
                            MedicationId = 4,
                            Name = "Amoxicillin",
                            Schedule = "Scheduled"
                        },
                        new
                        {
                            MedicationId = 5,
                            Name = "Aspirin",
                            Schedule = "Schedules"
                        },
                        new
                        {
                            MedicationId = 6,
                            Name = "Metformin",
                            Schedule = "PRN"
                        });
                });

            modelBuilder.Entity("CareDev.Models.MedicationAdministration", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("Admin_ID")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationAdministrations");
                });

            modelBuilder.Entity("CareDev.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ChronicConditionId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("ChronicConditionId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CareDev.Models.PatientAllergy", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("PatientAllergy");
                });

            modelBuilder.Entity("CareDev.Models.PatientCondition", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ChronicConditionId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "ChronicConditionId");

                    b.HasIndex("ChronicConditionId");

                    b.ToTable("PatientCondition");
                });

            modelBuilder.Entity("CareDev.Models.PatientFolder", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientFolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PatientId", "PatientFolderId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientFolders");
                });

            modelBuilder.Entity("CareDev.Models.PatientMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("MovementId");

                    b.HasIndex("PatientId");

                    b.HasIndex("WardId");

                    b.ToTable("PatientMovements");
                });

            modelBuilder.Entity("CareDev.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CareDev.Models.RoomType", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("CareDev.Models.TreatPatient", b =>
                {
                    b.Property<long>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TreatmentID"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFollowUpRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatPatients");
                });

            modelBuilder.Entity("CareDev.Models.Vital", b =>
                {
                    b.Property<int>("VitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalId"));

                    b.Property<int>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("PatientId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.HasKey("VitalId");

                    b.HasIndex("PatientId1");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("CareDev.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WardId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardId = 1,
                            Name = "General Ward"
                        },
                        new
                        {
                            WardId = 2,
                            Name = "Surgical Ward"
                        },
                        new
                        {
                            WardId = 3,
                            Name = "Maternity Ward"
                        },
                        new
                        {
                            WardId = 4,
                            Name = "X Ray Ward"
                        },
                        new
                        {
                            WardId = 6,
                            Name = "Labour Ward"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CareDev.Models.Admission", b =>
                {
                    b.HasOne("CareDev.Models.Bed", "Bed")
                        .WithOne()
                        .HasForeignKey("CareDev.Models.Admission", "BedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareDev.Models.Bed", null)
                        .WithOne("Admissions")
                        .HasForeignKey("CareDev.Models.Admission", "BedId1");

                    b.HasOne("CareDev.Models.Doctor", "Doctor")
                        .WithMany("Admissions")
                        .HasForeignKey("DoctorId");

                    b.HasOne("CareDev.Models.Employee", "Employee")
                        .WithMany("Admissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.RoomType", null)
                        .WithMany("Admissions")
                        .HasForeignKey("RoomTypeRoomId");

                    b.HasOne("CareDev.Models.Ward", "Ward")
                        .WithMany("Admissions")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Doctor");

                    b.Navigation("Employee");

                    b.Navigation("Patient");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("CareDev.Models.ApplicationUser", b =>
                {
                    b.HasOne("CareDev.Models.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId");

                    b.HasOne("CareDev.Models.ChronicCondition", "ChronicCondition")
                        .WithMany()
                        .HasForeignKey("ChronicConditionId");

                    b.HasOne("CareDev.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.Navigation("Allergy");

                    b.Navigation("ChronicCondition");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("CareDev.Models.Bed", b =>
                {
                    b.HasOne("CareDev.Models.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("CareDev.Models.Discharge", b =>
                {
                    b.HasOne("CareDev.Models.Admission", "Admission")
                        .WithOne()
                        .HasForeignKey("CareDev.Models.Discharge", "AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", null)
                        .WithMany("Discharge")
                        .HasForeignKey("PatientId1");

                    b.Navigation("Admission");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.DoctorInstruction", b =>
                {
                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.Employee", b =>
                {
                    b.HasOne("CareDev.Models.Role", null)
                        .WithMany("Employees")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("CareDev.Models.Medication", b =>
                {
                    b.HasOne("CareDev.Models.Employee", null)
                        .WithMany("Medications")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("CareDev.Models.MedicationAdministration", b =>
                {
                    b.HasOne("CareDev.Models.Medication", "Medication")
                        .WithMany("MedicationAdministrations")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("MedicationAdministrations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.Patient", b =>
                {
                    b.HasOne("CareDev.Models.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId");

                    b.HasOne("CareDev.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Patient")
                        .HasForeignKey("CareDev.Models.Patient", "ApplicationUserId");

                    b.HasOne("CareDev.Models.ChronicCondition", "ChronicCondition")
                        .WithMany()
                        .HasForeignKey("ChronicConditionId");

                    b.HasOne("CareDev.Models.Medication", "Medications")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.Navigation("Allergy");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ChronicCondition");

                    b.Navigation("Medications");
                });

            modelBuilder.Entity("CareDev.Models.PatientAllergy", b =>
                {
                    b.HasOne("CareDev.Models.Allergy", "Allergy")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.PatientCondition", b =>
                {
                    b.HasOne("CareDev.Models.ChronicCondition", "ChronicCondition")
                        .WithMany("PatientConditions")
                        .HasForeignKey("ChronicConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicCondition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.PatientFolder", b =>
                {
                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithOne("PatientFolder")
                        .HasForeignKey("CareDev.Models.PatientFolder", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.PatientMovement", b =>
                {
                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("Movement")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("CareDev.Models.TreatPatient", b =>
                {
                    b.HasOne("CareDev.Models.Employee", "Employee")
                        .WithMany("TreatPatients")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("TreatPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.Vital", b =>
                {
                    b.HasOne("CareDev.Models.Patient", "Patient")
                        .WithMany("Vitals")
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CareDev.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CareDev.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareDev.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CareDev.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareDev.Models.Allergy", b =>
                {
                    b.Navigation("PatientAllergies");
                });

            modelBuilder.Entity("CareDev.Models.ApplicationUser", b =>
                {
                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CareDev.Models.Bed", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("CareDev.Models.ChronicCondition", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("CareDev.Models.Doctor", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("CareDev.Models.Employee", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Medications");

                    b.Navigation("TreatPatients");
                });

            modelBuilder.Entity("CareDev.Models.Medication", b =>
                {
                    b.Navigation("MedicationAdministrations");
                });

            modelBuilder.Entity("CareDev.Models.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Discharge");

                    b.Navigation("MedicationAdministrations");

                    b.Navigation("Movement");

                    b.Navigation("PatientAllergies");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientFolder");

                    b.Navigation("TreatPatients");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("CareDev.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CareDev.Models.RoomType", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("CareDev.Models.Ward", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
